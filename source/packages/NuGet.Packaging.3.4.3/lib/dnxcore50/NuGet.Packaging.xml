<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.Packaging</name>
    </assembly>
    <members>
        <member name="T:NuGet.Packaging.NuspecReader">
            <summary>
            Reads .nuspec files
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.String)">
            <summary>
            Nuspec file reader.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.String,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Nuspec file reader.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.IO.Stream)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="stream">Nuspec file stream.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="xml">Nuspec file xml data.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.IO.Stream,NuGet.Frameworks.IFrameworkNameProvider,System.Boolean)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="stream">Nuspec file stream.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.Xml.Linq.XDocument,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="xml">Nuspec file xml data.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetDependencyGroups">
            <summary>
            Read package dependencies for all frameworks
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetReferenceGroups">
            <summary>
            Reference item groups
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetFrameworkReferenceGroups">
            <summary>
            Framework reference groups
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetLanguage">
            <summary>
            Package language
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetLicenseUrl">
            <summary>
            Package License Url
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetContentFiles">
            <summary>
            Build action groups
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageArchiveReader">
            <summary>
            Reads a development nupkg
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Stream)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Stream,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
            <param name="compatibilityProvider">Framework compatibility provider.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
            <param name="leaveStreamOpen">If true the nupkg stream will not be closed by the zip reader.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Stream,System.Boolean,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
            <param name="leaveStreamOpen">leave nupkg stream open</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
            <param name="compatibilityProvider">Framework compatibility provider.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Compression.ZipArchive)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="zipArchive">ZipArchive containing the nupkg data.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Compression.ZipArchive,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="zipArchive">ZipArchive containing the nupkg data.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
            <param name="compatibilityProvider">Framework compatibility provider.</param>
        </member>
        <member name="T:NuGet.Packaging.PackageFolderReader">
            <summary>
            Reads an unzipped nupkg folder.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.String)">
            <summary>
            Package folder reader
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Package folder reader
            </summary>
            <param name="folder">root directory of an extracted nupkg</param>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.String,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Package folder reader
            </summary>
            <param name="folderPath">root directory of an extracted nupkg</param>
            <param name="frameworkProvider">framework mappings</param>
            <param name="compatibilityProvider">framework compatibility provider</param>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.IO.DirectoryInfo,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Package folder reader
            </summary>
            <param name="folder">root directory of an extracted nupkg</param>
            <param name="frameworkProvider">framework mappings</param>
            <param name="compatibilityProvider">framework compatibility provider</param>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.GetNuspec">
            <summary>
            Opens the nuspec file in read only mode.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.GetStream(System.String)">
            <summary>
            Opens a local file in read only mode.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.GetRelativePath(System.IO.DirectoryInfo,System.IO.FileInfo)">
            <summary>
            Build the relative path in the same format that ZipArchive uses
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageReaderBase">
            <summary>
            Abstract class that both the zip and folder package readers extend
            This class contains the path conventions for both zip and folder readers
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.#ctor(NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Core package reader
            </summary>
            <param name="frameworkProvider">framework mapping provider</param>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.#ctor(NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Core package reader
            </summary>
            <param name="frameworkProvider">framework mapping provider</param>
            <param name="compatibilityProvider">framework compatibility provider</param>
        </member>
        <member name="P:NuGet.Packaging.PackageReaderBase.NuspecReader">
            <summary>
            Internal low level nuspec reader
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.GetSupportedFrameworks">
            <summary>
            Frameworks mentioned in the package.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.IsAllowedBuildFile(System.String,System.String)">
            <summary>
            only packageId.targets and packageId.props should be used from the build folder
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.IsReferenceAssembly(System.String)">
            <summary>
            True only for assemblies that should be added as references to msbuild projects
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageReference">
            <summary>
            Represents a package element in the packages.config file
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Creates a new packages config entry
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework,System.Boolean)">
            <summary>
            Creates a new packages config entry
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new packages config entry
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework,System.Boolean,System.Boolean,System.Boolean,NuGet.Versioning.VersionRange)">
            <summary>
            Creates a new packages config entry
            </summary>
            <param name="identity">Package id and version</param>
            <param name="targetFramework">Package target framework installed to the project</param>
            <param name="userInstalled">True if the user installed this package directly</param>
            <param name="developmentDependency">True if the package is a development dependency</param>
            <param name="requireReinstallation">True if this package needs to be reinstalled</param>
            <param name="allowedVersions">Restrict package versions to the allowedVersions range</param>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.PackageIdentity">
            <summary>
            Id and Version of the package
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.AllowedVersions">
            <summary>
            The allowed range of versions that this package can be upgraded/downgraded to.
            </summary>
            <remarks>This is null if unbounded</remarks>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.HasAllowedVersions">
            <summary>
            True if allowedVersions exists.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.TargetFramework">
            <summary>
            Installed target framework version of the package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.IsDevelopmentDependency">
            <summary>
            Development dependency
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.IsUserInstalled">
            <summary>
            True if the user installed or updated this package directly.
            False if this package was installed as a dependency by another package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.RequireReinstallation">
            <summary>
            Require reinstallation
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.ToString">
            <summary>
            Displays the identity and target framework of the reference.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfig.HasAttributeValue(System.Xml.Linq.XElement,System.String,System.String,System.Xml.Linq.XElement@)">
            <summary>
            Determine if the package node has the attribute value as the targetValue.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfig.BoolAttribute(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Get a boolean attribute value, or false if it does not exist
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackagesConfigReader">
            <summary>
            Reads packages.config
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Packages.config reader
            </summary>
            <param name="xml">Packages.config XML</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(NuGet.Frameworks.IFrameworkNameProvider,System.Xml.Linq.XDocument)">
            <summary>
            Packages.config reader
            </summary>
            <param name="frameworkMappings">Additional target framework mappings for parsing target frameworks</param>
            <param name="xml">Packages.config XML</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(System.IO.Stream)">
            <summary>
            Packages.config reader
            </summary>
            <param name="stream">Stream containing packages.config</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Packages.config reader
            </summary>
            <param name="stream">Stream containing packages.config</param>
            <param name="leaveStreamOpen">True will leave the stream open</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(NuGet.Frameworks.IFrameworkNameProvider,System.IO.Stream,System.Boolean)">
            <summary>
            Packages.config reader
            </summary>
            <param name="stream">Stream containing packages.config</param>
            <param name="leaveStreamOpen">True will leave the stream open</param>
            <param name="frameworkMappings">Additional target framework mappings for parsing target frameworks</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.GetMinClientVersion">
            <summary>
            Reads the minimum client version from packages.config
            </summary>
            <returns>Minimum client version or the default of 2.5.0</returns>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.GetPackages">
            <summary>
            Reads all package node entries in the config.
            If duplicate package ids exist an exception will be thrown.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.GetPackages(System.Boolean)">
            <summary>
            Reads all package node entries in the config.
            </summary>
            <param name="allowDuplicatePackageIds">If True validation will be performed to ensure that 
            only one entry exists for each unique package id.</param>
        </member>
        <member name="T:NuGet.Packaging.PackagesConfigWriter">
            <summary>
            Writes the packages.config XML file to a stream
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.String,System.Boolean)">
            <summary>
            Create a packages.config writer using file path
            </summary>
            <param name="fullPath">The full path to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.String,System.Boolean,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Create a packages.config writer using file path
            </summary>
            <param name="fullPath">The full path to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
            <param name="frameworkMappings">Framework mappings</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a packages.config writer using stream
            </summary>
            <param name="stream">Stream to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.IO.Stream,System.Boolean,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Create a packages.config writer using stream
            </summary>
            <param name="stream">Stream to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
            <param name="frameworkMappings">Framework mappings</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.WriteMinClientVersion(NuGet.Versioning.NuGetVersion)">
            <summary>
            Write a minimum client version to packages.config
            </summary>
            <param name="version">Minumum version of the client required to parse and use this file.</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(System.String,NuGet.Versioning.NuGetVersion,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Add a package entry
            </summary>
            <param name="packageId">Package Id</param>
            <param name="version">Package Version</param>
            <param name="targetFramework">Package targetFramework that's compatible with current project</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Adds a basic package entry to the file
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(NuGet.Packaging.PackageReference)">
            <summary>
            Adds a package entry to the file
            </summary>
            <param name="entry">Package reference entry</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.UpdatePackageEntry(NuGet.Packaging.PackageReference,NuGet.Packaging.PackageReference)">
            <summary>
            Update a package entry to the file
            </summary>
            <param name="entry">Package reference entry</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.UpdateOrAddPackageEntry(System.Xml.Linq.XDocument,NuGet.Packaging.PackageReference)">
            <summary>
            Update a package entry using the original entry as a base if it exists.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(System.String,NuGet.Versioning.NuGetVersion,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Remove a package entry
            </summary>
            <param name="packageId">Package Id</param>
            <param name="version">Package version</param>
            <param name="targetFramework">Package targetFramework</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Remove a package identity from the file
            </summary>
            <param name="identity">Package identity</param>
            <param name="targetFramework">Package targetFramework</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(NuGet.Packaging.PackageReference)">
            <summary>
            Removes a package entry from the file
            </summary>
            <param name="entry">Package reference entry</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.WriteFile(System.String)">
            <summary>
            Write the XDocument to the packages.config and disallow further changes.
            </summary>
            <param name="fullPath">the full path to packages.config file</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.Dispose">
            <summary>
            Write the XDocument to the stream and close it to disallow further changes.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.PackagingConstants.ManifestExtension">
            <summary>
            Represents the ".nuspec" extension.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Strings">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorDuplicatePackages">
            <summary>
               Looks up a localized string similar to There are duplicate packages: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidAllowedVersions">
            <summary>
               Looks up a localized string similar to Invalid allowedVersions for package id &apos;{0}&apos;: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidMinClientVersion">
            <summary>
               Looks up a localized string similar to Invalid minClientVersion: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidPackageVersion">
            <summary>
               Looks up a localized string similar to Invalid package version for package id &apos;{0}&apos;: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorNullOrEmptyPackageId">
            <summary>
               Looks up a localized string similar to Null or empty package id.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorUnableToDeleteFile">
            <summary>
               Looks up a localized string similar to Unable to delete temporary file &apos;{0}&apos;. Error: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.FailToLoadPackagesConfig">
            <summary>
               Looks up a localized string similar to Fail to load packages.config as XML file. Please check it. .
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.FailToWritePackagesConfig">
            <summary>
               Looks up a localized string similar to Failed to write packages.config as XML file &apos;{0}&apos;. Error: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidNuspecEntry">
            <summary>
               Looks up a localized string similar to The nuspec contains an invalid entry &apos;{0}&apos; in package &apos;{1}&apos; ..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Log_InstallingPackage">
            <summary>
               Looks up a localized string similar to Installing {0} {1}..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MinClientVersionAlreadyExist">
            <summary>
               Looks up a localized string similar to MinClientVersion already exists in packages.config.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MissingNuspec">
            <summary>
               Looks up a localized string similar to Nuspec file does not exist in package..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MultipleNuspecFiles">
            <summary>
               Looks up a localized string similar to Package contains multiple nuspec files..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackageEntryAlreadyExist">
            <summary>
               Looks up a localized string similar to Package entry already exists in packages.config. Id: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackageEntryNotExist">
            <summary>
               Looks up a localized string similar to Package entry does not exists in packages.config. Id: {0}, Version: {1}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackagesNodeNotExist">
            <summary>
               Looks up a localized string similar to Packages node does not exists in packages.config at {0}..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackageStreamShouldBeSeekable">
            <summary>
               Looks up a localized string similar to Package stream should be seekable.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.StringCannotBeNullOrEmpty">
            <summary>
               Looks up a localized string similar to String argument &apos;{0}&apos; cannot be null or empty.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.UnableToAddEntry">
            <summary>
               Looks up a localized string similar to An error occurred while updating packages.config. The file was closed before the entry could be added..
            </summary>
        </member>
        <member name="T:NuGet.Packaging.INuspecReader">
            <summary>
            A development package nuspec reader
            </summary>
        </member>
        <member name="M:NuGet.Packaging.INuspecReader.GetLanguage">
            <summary>
            The locale ID for the package, such as en-us.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetFrameworkItems">
            <summary>
            Returns all framework references found in the nuspec.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetBuildItems">
            <summary>
            Returns all items under the build folder.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetToolItems">
            <summary>
            Returns all items under the tools folder.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetContentItems">
            <summary>
            Returns all items found in the content folder.
            </summary>
            <remarks>
            Some legacy behavior has been dropped here due to the mix of content folders and target framework
            folders here.
            </remarks>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetLibItems">
            <summary>
            Returns all lib items without any filtering. Use GetReferenceItems for the filtered list.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetReferenceItems">
            <summary>
            Returns lib items + filtering based on the nuspec and other NuGet rules.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetPackageDependencies">
            <summary>
            Returns package dependencies.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.IPackageResolver">
            <summary>
            Core package resolver
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">All relevant packages. This list must include the target packages.</param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Collections.Generic.IEnumerable{NuGet.Packaging.PackageReference},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">
            All relevant packages. This list must include the target packages and
            installed packages.
            </param>
            <param name="installedPackages">
            Packages already installed into the project. These will be favored as
            dependency options.
            </param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">All relevant packages. This list must include the target packages.</param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Collections.Generic.IEnumerable{NuGet.Packaging.PackageReference},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">
            All relevant packages. This list must include the target packages and
            installed packages.
            </param>
            <param name="installedPackages">
            Packages already installed into the project. These will be favored as
            dependency options.
            </param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="T:NuGet.Packaging.EmptyFrameworkFolderFile">
            <summary>
            Represents an empty framework folder in NuGet 2.0+ packages. 
            An empty framework folder is represented by a file named "_._".
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageFile.Path">
            <summary>
            Gets the full path of the file inside the package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageFile.EffectivePath">
            <summary>
            Gets the path that excludes the root folder (content/lib/tools) and framework folder (if present).
            </summary>
            <example>
            If a package has the Path as 'content\[net40]\scripts\jQuery.js', the EffectivePath 
            will be 'scripts\jQuery.js'.
            
            If it is 'tools\init.ps1', the EffectivePath will be 'init.ps1'.
            </example>
        </member>
        <member name="P:NuGet.Packaging.IPackageMetadata.FrameworkReferences">
            <summary>
            Specifies assemblies from GAC that the package depends on.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageMetadata.PackageAssemblyReferences">
            <summary>
            Returns sets of References specified in the manifest.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageMetadata.DependencyGroups">
            <summary>
            Specifies sets other packages that the package depends on.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageMetadata.ContentFiles">
            <summary>
            Returns sets of Content Files specified in the manifest.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Manifest.Save(System.IO.Stream)">
            <summary>
            Saves the current manifest to the specified stream.
            </summary>
            <param name="stream">The target stream.</param>
        </member>
        <member name="M:NuGet.Packaging.Manifest.Save(System.IO.Stream,System.Int32)">
            <summary>
            Saves the current manifest to the specified stream.
            </summary>
            <param name="stream">The target stream.</param>
            <param name="minimumManifestVersion">The minimum manifest version that this class must use when saving.</param>
        </member>
        <member name="M:NuGet.Packaging.ManifestMetadata.#ctor(NuGet.Packaging.IPackageMetadata)">
            <summary>
            Constructs a ManifestMetadata instance from an IPackageMetadata instance
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV1">
            <summary>
            Baseline schema 
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV2">
            <summary>
            Added copyrights, references and release notes
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV3">
            <summary>
            Used if the version is a semantic version.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV4">
            <summary>
            Added 'targetFramework' attribute for 'dependency' elements.
            Allow framework folders under 'content' and 'tools' folders. 
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV5">
            <summary>
            Added 'targetFramework' attribute for 'references' elements.
            Added 'minClientVersion' attribute
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV6">
            <summary>
            Allows XDT transformation
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageBuilder.ContentFiles">
            <summary>
            ContentFiles section from the manifest for content v2
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageBuilder.ResolvePackagePath(System.String,System.String,System.String,System.String)">
            <summary>
            Determins the path of the file inside a package.
            For recursive wildcard paths, we preserve the path portion beginning with the wildcard.
            For non-recursive wildcard paths, we use the file name from the actual file path on disk.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageBuilder.IsKnownFolder(System.String)">
            <summary>
            Returns true if the path uses a known folder root.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageBuilder.ParseTags(System.String)">
            <summary>
            Tags come in this format. tag1 tag2 tag3 etc..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PhysicalPackageFile.SourcePath">
            <summary>
            Path on disk
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PhysicalPackageFile.TargetPath">
            <summary>
            Path in package
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageCreation.Resources.NuGetResources">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.CannotCreateEmptyPackage">
            <summary>
               Looks up a localized string similar to Cannot create a package that has no dependencies nor content..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.DependencyHasInvalidVersion">
            <summary>
               Looks up a localized string similar to Dependency &apos;{0}&apos; has an invalid version..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.DuplicateDependenciesDefined">
            <summary>
               Looks up a localized string similar to &apos;{0}&apos; already has a dependency defined for &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.IncompatibleSchema">
            <summary>
               Looks up a localized string similar to The schema version of &apos;{0}&apos; is incompatible with version {1} of NuGet. Please upgrade NuGet to the latest version from http://go.microsoft.com/fwlink/?LinkId=213942..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.InvalidPackageId">
            <summary>
               Looks up a localized string similar to The package ID &apos;{0}&apos; contains invalid characters. Examples of valid package IDs include &apos;MyPackage&apos; and &apos;MyPackage.Sample&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_DependenciesHasMixedElements">
            <summary>
               Looks up a localized string similar to &lt;dependencies&gt; element must not contain both &lt;group&gt; and &lt;dependency&gt; child elements..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_ExcludeContainsInvalidCharacters">
            <summary>
               Looks up a localized string similar to Exclude path &apos;{0}&apos; contains invalid characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_IdMaxLengthExceeded">
            <summary>
               Looks up a localized string similar to Id must not exceed 100 characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_InvalidMinClientVersion">
            <summary>
               Looks up a localized string similar to The &apos;minClientVersion&apos; attribute in the package manifest has invalid value. It must be a valid version string..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_InvalidPrereleaseDependency">
            <summary>
               Looks up a localized string similar to A stable release of a package should not have on a prerelease dependency. Either modify the version spec of dependency &quot;{0}&quot; or update the version field..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_InvalidReference">
            <summary>
               Looks up a localized string similar to Invalid assembly reference &apos;{0}&apos;. Ensure that a file named &apos;{0}&apos; exists in the lib directory..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_InvalidReferenceFile">
            <summary>
               Looks up a localized string similar to Assembly reference &apos;{0}&apos; contains invalid characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_ReferencesHasMixedElements">
            <summary>
               Looks up a localized string similar to &lt;references&gt; element must not contain both &lt;group&gt; and &lt;reference&gt; child elements..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_ReferencesIsEmpty">
            <summary>
               Looks up a localized string similar to The element package\metadata\references\group must contain at least one &lt;reference&gt; child element..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_RequiredElementMissing">
            <summary>
               Looks up a localized string similar to The required element &apos;{0}&apos; is missing from the manifest..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_RequiredMetadataMissing">
            <summary>
               Looks up a localized string similar to {0} is required..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_RequireLicenseAcceptanceRequiresLicenseUrl">
            <summary>
               Looks up a localized string similar to Enabling license acceptance requires a license url..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_SourceContainsInvalidCharacters">
            <summary>
               Looks up a localized string similar to Source path &apos;{0}&apos; contains invalid characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_TargetContainsInvalidCharacters">
            <summary>
               Looks up a localized string similar to Target path &apos;{0}&apos; contains invalid characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_UriCannotBeEmpty">
            <summary>
               Looks up a localized string similar to {0} cannot be empty..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.PackageAuthoring_FileNotFound">
            <summary>
               Looks up a localized string similar to File not found: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.SemVer2VersionsNotSupported">
            <summary>
               Looks up a localized string similar to Versions using SemVer 2.0.0 are not supported: {0}..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.SemVerSpecialVersionTooLong">
            <summary>
               Looks up a localized string similar to The special version part cannot exceed 20 characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.UnknownSchemaVersion">
            <summary>
               Looks up a localized string similar to Unknown schema version &apos;{0}&apos;..
            </summary>
        </member>
        <member name="M:NuGet.Packaging.FrameworkNameUtility.ParseFrameworkFolderName(System.String,System.Boolean,System.String@)">
            <summary>
            Parses the specified string into FrameworkName object.
            </summary>
            <param name="path">The string to be parse.</param>
            <param name="strictParsing">if set to <c>true</c>, parse the first folder of path even if it is unrecognized framework.</param>
            <param name="effectivePath">returns the path after the parsed target framework</param>
            <returns></returns>
        </member>
        <member name="P:NuGet.Packaging.PackageExtraction.PackageExtractionBehavior.XmlDocFileSaveMode">
            <summary>
            Gets or sets the <see cref="!:PackageExtraction.XmlDocFileSaveMode"/>.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageExtractionContext.UseLegacyPackageInstallPath">
            <summary>
            If True package folder paths will use the non-normalized version path,
            even for new installs.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageHelper.IsSatellitePackage(NuGet.Packaging.Core.IPackageCoreReader,NuGet.Packaging.Core.PackageIdentity@,System.String@)">
            <summary>
            A package is deemed to be a satellite package if it has a language property set, the id of the package is
            of the format [.*].[Language]
            and it has at least one dependency with an id that maps to the runtime package .
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageHelper.GetInstalledPackageFiles(NuGet.Packaging.PackageArchiveReader,NuGet.Packaging.Core.PackageIdentity,NuGet.Packaging.PackagePathResolver,NuGet.Packaging.PackageSaveMode)">
            <summary>
            This returns all the installed package files (does not include satellite files)
            </summary>
            <param name="packageIdentity"></param>
            <param name="packagePathResolver"></param>
            <param name="packageDirectory"></param>
            <param name="packageSaveMode"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="F:NuGet.Packaging.PackageSaveMode.Defaultv2">
            <summary>
            Default package save mode for v2 (packages.config)-style restore.
            This includes <see cref="F:NuGet.Packaging.PackageSaveMode.Files"/> and <see cref="F:NuGet.Packaging.PackageSaveMode.Nupkg"/>.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.PackageSaveMode.Defaultv3">
            <summary>
            Default package save mode for v3 (project.json)-style restore.
            This includes <see cref="F:NuGet.Packaging.PackageSaveMode.Files"/>, <see cref="F:NuGet.Packaging.PackageSaveMode.Nuspec"/>, and <see cref="F:NuGet.Packaging.PackageSaveMode.Nupkg"/>.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.XmlDocFileSaveMode.None">
            <summary>
            Treat XML doc files as regular files (legacy behavior).
            </summary>
        </member>
        <member name="F:NuGet.Packaging.XmlDocFileSaveMode.Skip">
            <summary>
            Do not extract XML documentation files
            </summary>
        </member>
        <member name="F:NuGet.Packaging.XmlDocFileSaveMode.Compress">
            <summary>
            Compress XML doc files in a zip archive.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.ZipArchiveExtensions">
            <summary>
            Nupkg reading helper methods
            </summary>
        </member>
        <member name="T:NuGet.Shared.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode(System.Object[])">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
    </members>
</doc>
